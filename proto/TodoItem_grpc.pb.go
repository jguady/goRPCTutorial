// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/TodoItem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	ListTodoItems(ctx context.Context, in *ListTodoItemFilterRequest, opts ...grpc.CallOption) (TodoService_ListTodoItemsClient, error)
	GetTodoItem(ctx context.Context, in *GetTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error)
	CreateTodoItem(ctx context.Context, in *CreateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error)
	UpdateTodoItem(ctx context.Context, in *UpdateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error)
	DeleteTodoItem(ctx context.Context, in *DeleteTodoItemRequest, opts ...grpc.CallOption) (*DeleteTodoItemResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) ListTodoItems(ctx context.Context, in *ListTodoItemFilterRequest, opts ...grpc.CallOption) (TodoService_ListTodoItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/TodoService/ListTodoItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceListTodoItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_ListTodoItemsClient interface {
	Recv() (*TodoItem, error)
	grpc.ClientStream
}

type todoServiceListTodoItemsClient struct {
	grpc.ClientStream
}

func (x *todoServiceListTodoItemsClient) Recv() (*TodoItem, error) {
	m := new(TodoItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) GetTodoItem(ctx context.Context, in *GetTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, "/TodoService/GetTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) CreateTodoItem(ctx context.Context, in *CreateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, "/TodoService/CreateTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodoItem(ctx context.Context, in *UpdateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, "/TodoService/UpdateTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoItem(ctx context.Context, in *DeleteTodoItemRequest, opts ...grpc.CallOption) (*DeleteTodoItemResponse, error) {
	out := new(DeleteTodoItemResponse)
	err := c.cc.Invoke(ctx, "/TodoService/DeleteTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	ListTodoItems(*ListTodoItemFilterRequest, TodoService_ListTodoItemsServer) error
	GetTodoItem(context.Context, *GetTodoItemRequest) (*TodoItem, error)
	CreateTodoItem(context.Context, *CreateTodoItemRequest) (*TodoItem, error)
	UpdateTodoItem(context.Context, *UpdateTodoItemRequest) (*TodoItem, error)
	DeleteTodoItem(context.Context, *DeleteTodoItemRequest) (*DeleteTodoItemResponse, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) ListTodoItems(*ListTodoItemFilterRequest, TodoService_ListTodoItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTodoItems not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoItem(context.Context, *GetTodoItemRequest) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) CreateTodoItem(context.Context, *CreateTodoItemRequest) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoItem(context.Context, *UpdateTodoItemRequest) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoItem(context.Context, *DeleteTodoItemRequest) (*DeleteTodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_ListTodoItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTodoItemFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).ListTodoItems(m, &todoServiceListTodoItemsServer{stream})
}

type TodoService_ListTodoItemsServer interface {
	Send(*TodoItem) error
	grpc.ServerStream
}

type todoServiceListTodoItemsServer struct {
	grpc.ServerStream
}

func (x *todoServiceListTodoItemsServer) Send(m *TodoItem) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_GetTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/GetTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoItem(ctx, req.(*GetTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_CreateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/CreateTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodoItem(ctx, req.(*CreateTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/UpdateTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoItem(ctx, req.(*UpdateTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/DeleteTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodoItem(ctx, req.(*DeleteTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodoItem",
			Handler:    _TodoService_GetTodoItem_Handler,
		},
		{
			MethodName: "CreateTodoItem",
			Handler:    _TodoService_CreateTodoItem_Handler,
		},
		{
			MethodName: "UpdateTodoItem",
			Handler:    _TodoService_UpdateTodoItem_Handler,
		},
		{
			MethodName: "DeleteTodoItem",
			Handler:    _TodoService_DeleteTodoItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTodoItems",
			Handler:       _TodoService_ListTodoItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/TodoItem.proto",
}
